///////////////////////////////////////////////////////////////////////////////////
/// OpenGL Image (gli.g-truc.net)
///
/// Copyright (c) 2008 - 2012 G-Truc Creation (www.g-truc.net)
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.
///
/// @ref core
/// @file gli/format.hpp
/// @date 2012-10-16 / 2015-06-16
/// @author Christophe Riccio
///////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "type.hpp"
#include <cstdint>

namespace gli
{
	enum format
	{
		FORMAT_UNDEFINED = 0,
		FORMAT_RG4_UNORM = 1, FORMAT_FIRST = FORMAT_RG4_UNORM,
		FORMAT_RG4_USCALED = 2,
		FORMAT_RGBA4_UNORM = 3,
		FORMAT_RGBA4_USCALED = 4,
		FORMAT_R5G6B5_UNORM = 5,
		FORMAT_R5G6B5_USCALED = 6,
		FORMAT_RGB5A1_UNORM = 7,
		FORMAT_RGB5A1_USCALED = 8,

		FORMAT_R8_UNORM = 9,
		FORMAT_R8_SNORM = 10,
		FORMAT_R8_USCALED = 11,
		FORMAT_R8_SSCALED = 12,
		FORMAT_R8_UINT = 13,
		FORMAT_R8_SINT = 14,
		FORMAT_R8_SRGB = 15,

		FORMAT_RG8_UNORM = 16,
		FORMAT_RG8_SNORM = 17,
		FORMAT_RG8_USCALED = 18,
		FORMAT_RG8_SSCALED = 19,
		FORMAT_RG8_UINT = 20,
		FORMAT_RG8_SINT = 21,
		FORMAT_RG8_SRGB = 22,

		FORMAT_RGB8_UNORM = 23,
		FORMAT_RGB8_SNORM = 24,
		FORMAT_RGB8_USCALED = 25,
		FORMAT_RGB8_SSCALED = 26,
		FORMAT_RGB8_UINT = 27,
		FORMAT_RGB8_SINT = 28,
		FORMAT_RGB8_SRGB = 29,

		FORMAT_RGBA8_UNORM = 30,
		FORMAT_RGBA8_SNORM = 31,
		FORMAT_RGBA8_USCALED = 32,
		FORMAT_RGBA8_SSCALED = 33,
		FORMAT_RGBA8_UINT = 34,
		FORMAT_RGBA8_SINT = 35,
		FORMAT_RGBA8_SRGB = 36,

		FORMAT_RGB10A2_UNORM = 37,
		FORMAT_RGB10A2_SNORM = 38,
		FORMAT_RGB10A2_USCALED = 39,
		FORMAT_RGB10A2_SSCALED = 40,
		FORMAT_RGB10A2_UINT = 41,
		FORMAT_RGB10A2_SINT = 42,

		FORMAT_R16_UNORM = 43,
		FORMAT_R16_SNORM = 44,
		FORMAT_R16_USCALED = 45,
		FORMAT_R16_SSCALED = 46,
		FORMAT_R16_UINT = 47,
		FORMAT_R16_SINT = 48,
		FORMAT_R16_SFLOAT = 49,

		FORMAT_RG16_UNORM = 50,
		FORMAT_RG16_SNORM = 51,
		FORMAT_RG16_USCALED = 52,
		FORMAT_RG16_SSCALED = 53,
		FORMAT_RG16_UINT = 54,
		FORMAT_RG16_SINT = 55,
		FORMAT_RG16_SFLOAT = 56,

		FORMAT_RGB16_UNORM = 57,
		FORMAT_RGB16_SNORM = 58,
		FORMAT_RGB16_USCALED = 59,
		FORMAT_RGB16_SSCALED = 60,
		FORMAT_RGB16_UINT = 61,
		FORMAT_RGB16_SINT = 62,
		FORMAT_RGB16_SFLOAT = 63,

		FORMAT_RGBA16_UNORM = 64,
		FORMAT_RGBA16_SNORM = 65,
		FORMAT_RGBA16_USCALED = 66,
		FORMAT_RGBA16_SSCALED = 67,
		FORMAT_RGBA16_UINT = 68,
		FORMAT_RGBA16_SINT = 69,
		FORMAT_RGBA16_SFLOAT = 70,

		FORMAT_R32_UINT = 71,
		FORMAT_R32_SINT = 72,
		FORMAT_R32_SFLOAT = 73,
		FORMAT_RG32_UINT = 74,
		FORMAT_RG32_SINT = 75,
		FORMAT_RG32_SFLOAT = 76,
		FORMAT_RGB32_UINT = 77,
		FORMAT_RGB32_SINT = 78,
		FORMAT_RGB32_SFLOAT = 79,
		FORMAT_RGBA32_UINT = 80,
		FORMAT_RGBA32_SINT = 81,
		FORMAT_RGBA32_SFLOAT = 82,

		FORMAT_R64_SFLOAT = 83,
		FORMAT_RG64_SFLOAT = 84,
		FORMAT_RGB64_SFLOAT = 85,
		FORMAT_RGBA64_SFLOAT = 86,

		FORMAT_RG11B10_UFLOAT = 87,
		FORMAT_RGB9E5_UFLOAT = 88,

		FORMAT_D16_UNORM = 89,
		FORMAT_D24_UNORM = 90,
		FORMAT_D32_SFLOAT = 91,
		FORMAT_S8_UINT = 92,
		FORMAT_D16_UNORM_S8_UINT = 93,
		FORMAT_D24_UNORM_S8_UINT = 94,
		FORMAT_D32_SFLOAT_S8_UINT = 95,

		FORMAT_RGBA_DXT1_UNORM,
		FORMAT_RGBA_DXT1_SRGB,
		FORMAT_RGBA_DXT3_UNORM,
		FORMAT_RGBA_DXT3_SRGB,
		FORMAT_RGBA_DXT5_UNORM,
		FORMAT_RGBA_DXT5_SRGB,
		FORMAT_R_ATI1N_UNORM,
		FORMAT_R_ATI1N_SNORM,
		FORMAT_RG_ATI2N_UNORM,
		FORMAT_RG_ATI2N_SNORM,
		FORMAT_RGB_BP_UFLOAT,
		FORMAT_RGB_BP_SFLOAT,
		FORMAT_RGBA_BP_UNORM,
		FORMAT_RGBA_BP_SRGB,

		FORMAT_RGB_ETC2_UNORM = 110,
		FORMAT_RGB_ETC2_SRGB,
		FORMAT_RGBA_ETC2_A1_UNORM,
		FORMAT_RGBA_ETC2_A1_SRGB,
		FORMAT_RGBA_ETC2_UNORM,
		FORMAT_RGBA_ETC2_SRGB,
		FORMAT_R_EAC_UNORM,
		FORMAT_R_EAC_SNORM,
		FORMAT_RG_EAC_UNORM,
		FORMAT_RG_EAC_SNORM,
		FORMAT_ASTC_4x4_UNORM,
		FORMAT_ASTC_4x4_SRGB,
		FORMAT_ASTC_5x4_UNORM,
		FORMAT_ASTC_5x4_SRGB,
		FORMAT_ASTC_5x5_UNORM,
		FORMAT_ASTC_5x5_SRGB,
		FORMAT_ASTC_6x5_UNORM,
		FORMAT_ASTC_6x5_SRGB,
		FORMAT_ASTC_6x6_UNORM,
		FORMAT_ASTC_6x6_SRGB,
		FORMAT_ASTC_8x5_UNORM,
		FORMAT_ASTC_8x5_SRGB,
		FORMAT_ASTC_8x6_UNORM,
		FORMAT_ASTC_8x6_SRGB,
		FORMAT_ASTC_8x8_UNORM,
		FORMAT_ASTC_8x8_SRGB,
		FORMAT_ASTC_10x5_UNORM,
		FORMAT_ASTC_10x5_SRGB,
		FORMAT_ASTC_10x6_UNORM,
		FORMAT_ASTC_10x6_SRGB,
		FORMAT_ASTC_10x8_UNORM,
		FORMAT_ASTC_10x8_SRGB,
		FORMAT_ASTC_10x10_UNORM,
		FORMAT_ASTC_10x10_SRGB,
		FORMAT_ASTC_12x10_UNORM,
		FORMAT_ASTC_12x10_SRGB,
		FORMAT_ASTC_12x12_UNORM,
		FORMAT_ASTC_12x12_SRGB,

		FORMAT_BGRA4_UNORM,
		FORMAT_BGRA4_USCALED,
		FORMAT_B5G6R5_UNORM,
		FORMAT_B5G6R5_USCALED,
		FORMAT_BGR5A1_UNORM,
		FORMAT_BGR5A1_USCALED,

		FORMAT_BGR8_UNORM,
		FORMAT_BGR8_SNORM,
		FORMAT_BGR8_USCALED,
		FORMAT_BGR8_SSCALED,
		FORMAT_BGR8_UINT,
		FORMAT_BGR8_SINT,
		FORMAT_BGR8_SRGB,

		FORMAT_BGRA8_UNORM,
		FORMAT_BGRA8_SNORM,
		FORMAT_BGRA8_USCALED,
		FORMAT_BGRA8_SSCALED,
		FORMAT_BGRA8_UINT,
		FORMAT_BGRA8_SINT,
		FORMAT_BGRA8_SRGB,

		FORMAT_BGR10A2_UNORM,
		FORMAT_BGR10A2_SNORM,
		FORMAT_BGR10A2_USCALED,
		FORMAT_BGR10A2_SSCALED,
		FORMAT_BGR10A2_UINT,
		FORMAT_BGR10A2_SINT,

		FORMAT_RG3B2_UNORM,
		FORMAT_BGRX8_UNORM,
		FORMAT_BGRX8_SRGB,

		FORMAT_L8_UNORM,
		FORMAT_A8_UNORM,
		FORMAT_LA8_UNORM,
		FORMAT_L16_UNORM,
		FORMAT_A16_UNORM,
		FORMAT_LA16_UNORM,

		FORMAT_RGB_PVRTC1_8X8_UNORM,
		FORMAT_RGB_PVRTC1_8X8_SRGB,
		FORMAT_RGB_PVRTC1_16X8_UNORM,
		FORMAT_RGB_PVRTC1_16X8_SRGB,
		FORMAT_RGBA_PVRTC1_8X8_UNORM,
		FORMAT_RGBA_PVRTC1_8X8_SRGB,
		FORMAT_RGBA_PVRTC1_16X8_UNORM,
		FORMAT_RGBA_PVRTC1_16X8_SRGB,
		FORMAT_RGBA_PVRTC2_4X4_UNORM,
		FORMAT_RGBA_PVRTC2_4X4_SRGB,
		FORMAT_RGBA_PVRTC2_8X4_UNORM,
		FORMAT_RGBA_PVRTC2_8X4_SRGB,

		FORMAT_RGB_ETC_UNORM,
		FORMAT_RGB_ATC_UNORM,
		FORMAT_RGBA_ATC_EXPLICIT_UNORM,
		FORMAT_RGBA_ATC_INTERPOLATED_UNORM, FORMAT_LAST = FORMAT_RGBA_ATC_INTERPOLATED_UNORM
	};

	enum swizzle
	{
		SWIZZLE_RED, SWIZZLE_FIRST = SWIZZLE_RED, SWIZZLE_CHANNEL_FIRST = SWIZZLE_RED,
		SWIZZLE_GREEN,
		SWIZZLE_BLUE,
		SWIZZLE_ALPHA, SWIZZLE_CHANNEL_LAST = SWIZZLE_ALPHA,
		SWIZZLE_ZERO,
		SWIZZLE_ONE, SWIZZLE_LAST = SWIZZLE_ONE
	};

	inline bool is_channel(swizzle Swizzle)
	{
		return Swizzle >= SWIZZLE_CHANNEL_FIRST && Swizzle <= SWIZZLE_CHANNEL_LAST;
	}

	enum
	{
		FORMAT_INVALID = -1,
		FORMAT_COUNT = FORMAT_LAST - FORMAT_FIRST + 1,
		SWIZZLE_COUNT = SWIZZLE_LAST - SWIZZLE_FIRST + 1
	};

	inline bool is_valid(format Format)
	{
		return Format >= FORMAT_FIRST && Format <= FORMAT_LAST;
	}

	typedef glm::tvec4<swizzle> swizzles;

	bool is_compressed(format Format);
	bool is_srgb(format Format);
	size_t block_size(format Format);
	ivec3 block_dimensions(format Format);
	size_t component_count(format Format);
}//namespace gli

#include "./core/format.inl"
